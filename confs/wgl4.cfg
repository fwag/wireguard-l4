package.path = "rom/?.lua";
local vmm = require "vmm";

local L4 = require("L4");
local ld = L4.default_loader;

local vbus = ld:new_channel();
local io_vbus_rtc = ld:new_channel();

-- bCONS
local cons = ld:new_channel();

ld:start({ caps = { cons = cons:svr(); },
          log = L4.Env.log
        },
        "rom/cons -a");
ld.log_fab = cons;
-- eCONS


-- local net_ports = {
--  net0 = 1,
--  net1 = 1,
-- }

-- bNET
local p2p = ld:new_channel();
ld:start({
          caps = { svr = p2p:svr() },
          log = { "p2p", "Blue" }
        },
        "rom/l4vio_net_p2p" );

local ports = {}
ports[1] = p2p:create(0, "ds-max=4")
ports[2] = p2p:create(0, "ds-max=4")
-- eNET

local serialdev = { arm = "ttyAMA0", arm64 = "ttyAMA0", amd64 = "ttyS0" };

local function start_vm(id, net)
  local flags = L4.Mem_alloc_flags.Continuous
              | L4.Mem_alloc_flags.Pinned
              | L4.Mem_alloc_flags.Super_pages;
  local align = 21;


  ld:startv({
           caps = {
	            net = net,
              ram = L4.Env.user_factory:create(L4.Proto.Dataspace,
                                              128 * 1024 * 1024,
                                              flags, align):m("rw"),
           },
           log = { "vm-" .. id, "", "key=" .. id }, 
	},
         "rom/uvmm", "-v",
            "-krom/linux",
            "-rrom/ramdisk.cpio.gz",
            "-drom/virt.dtb",
            "-cconsole=" .. serialdev[L4.Info.arch()] .. " rw");

end


-- vmm.start_virtio_switch(net_ports);
-- vmm.start_virtio_switch(net_ports, nil, nil, "switch");

ld:start({
          caps = {
            vbus = vbus:svr(),
            icu    = L4.Env.icu,
            iommu  = L4.Env.iommu,
            sigma0 = L4.Env.sigma0,
            vbus_rtc  = io_vbus_rtc:svr(),
          },
          log      = { "IO", "y" },
          l4re_dbg = L4.Dbg.Warn,
        },
        "rom/io rom/x86-legacy.devs rom/pci-e1000.io");

local rtc = ld:new_channel();

ld:start({
          caps = {
            vbus = io_vbus_rtc,
            rtc  = rtc:svr(),
          },
        },
        "rom/rtc");

ld:start({
          caps = {
            rtc = rtc,
            vbus = vbus,
	          net = ports[1],
          },
          log = { "wg", "Blue" },
        }, "rom/wgl4 -cconsole=" .. serialdev[L4.Info.arch()] .. " rw");

start_vm(1, ports[2])
